
enum Status {
  INDEXING
  READY
  TERMINATED
}

type Project @entity {
  id: ID!

  owner: String!
  metadata: String! # IPFS hash
  currentDeployment: String! # IPFS hash
  currentVersion: String! # IPFS hash
  updatedTimestamp: Date!
  createdTimestamp: Date!

  deployments: [ProjectDeployment] @derivedFrom(field: "project")
}

type ProjectDeployment @entity {
  id: ID!

  project: Project!
  deployment: Deployment!
}

type Deployment @entity {
  id: ID! # deploymentId, IPFS hash to deployment

  version: String! # IPFS hash to version info
  projects: [ProjectDeployment] @derivedFrom(field: "deployment")
  indexers: [DeploymentIndexer]! @derivedFrom(field: "deployment")
  createdTimestamp: Date!
}

type DeploymentIndexer @entity {
  id: ID! # indexer adderss + deployment id

  indexerAddress: String! # address of indexer
  indexer: Indexer!
  deployment: Deployment!

  blockHeight: BigInt!
  mmrRoot: String
  timestamp: Date
  status: Status!

  # endpoint: String! # TODO need updated contract
}

type Era @entity {

  id: ID! # Era id

  startTime: Date! # Block timestamp the Era is started
  endTime: Date # Block timestamp that the successive Era is started
}

type EraValue @jsonField {
  era: Int!
  value: BigInt!
  valueAfter: BigInt!
}

type Indexer @entity {

  id: ID! # Indexers address

  metadata: String # Ipfs hash to metadata

  controller: String # Controller address for the indexer

  # rewardPool: String! # Address for the reward pool contract

  commission: EraValue!
  totalStake: EraValue!

  delegations: [Delegation] @derivedFrom(field: "indexer")
}


type Delegation @entity {
  id: ID! # nominator + indexer addresses

  delegatorAddress: String! # nominator address
  indexerAddress: String! # indexer address
  indexer: Indexer!

  amount: EraValue!
}

type Withdrawl @entity {
  id: ID! # nominator + indexer addresses

  delegator: String! # nominator address
  indexer: String! # nominator address

  startTime: Date!
  amount: BigInt!
}


# TODO include rewards to claim
