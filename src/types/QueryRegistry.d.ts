/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

export interface TypedEventFilter<_EventArgsArray, _EventArgsObject>
  extends EventFilter {}

export interface TypedEvent<EventArgs extends Result> extends Event {
  args: EventArgs;
}

export type TypedListener<
  EventArgsArray extends Array<any>,
  EventArgsObject
> = (
  ...listenerArg: [
    ...EventArgsArray,
    TypedEvent<EventArgsArray & EventArgsObject>
  ]
) => void;

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>;
};
export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
  infer C,
  any
>
  ? C
  : never;
export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F["deploy"]>
  : never;


interface QueryRegistryInterface extends ethers.utils.Interface {
  functions: {
    "createQueryProject(bytes32,bytes32,bytes32)": FunctionFragment;
    "deploymentStatusByIndexer(bytes32,address)": FunctionFragment;
    "isOffline(bytes32,address)": FunctionFragment;
    "nextQueryId()": FunctionFragment;
    "numberOfIndexingDeployments(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "queryInfoCountByOwner(address)": FunctionFragment;
    "queryInfoIdsByOwner(address,uint256)": FunctionFragment;
    "queryInfos(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportIndexingStatus(bytes32,uint256,bytes32,uint256,uint8)": FunctionFragment;
    "setSettings(address)": FunctionFragment;
    "settings()": FunctionFragment;
    "startIndexing(bytes32)": FunctionFragment;
    "stopIndexing(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterQuery(uint256)": FunctionFragment;
    "updateQueryProject(uint256,bytes32,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createQueryProject",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentStatusByIndexer",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOffline",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfIndexingDeployments",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryInfoCountByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryInfoIdsByOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportIndexingStatus",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSettings", values: [string]): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startIndexing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopIndexing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQueryProject",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createQueryProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentStatusByIndexer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOffline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextQueryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfIndexingDeployments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryInfoCountByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryInfoIdsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportIndexingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startIndexing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopIndexing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQueryProject",
    data: BytesLike
  ): Result;

  events: {
    "CreateQuery(uint256,address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StartIndexing(address,bytes32)": EventFragment;
    "StopIndexing(address,bytes32)": EventFragment;
    "UpdateDeploymentStatus(address,bytes32,uint256,bytes32,uint256,uint8)": EventFragment;
    "UpdateQuery(uint256,bytes32,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateQuery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartIndexing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopIndexing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDeploymentStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateQuery"): EventFragment;
}

export type CreateQueryEvent = TypedEvent<
  [BigNumber, string, string] & {
    queryId: BigNumber;
    creator: string;
    metadata: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StartIndexingEvent = TypedEvent<
  [string, string] & { indexer: string; deploymentId: string }
>;

export type StopIndexingEvent = TypedEvent<
  [string, string] & { indexer: string; deploymentId: string }
>;

export type UpdateDeploymentStatusEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, number] & {
    indexer: string;
    deploymentId: string;
    blockheight: BigNumber;
    mmrRoot: string;
    timestamp: BigNumber;
    status: number;
  }
>;

export type UpdateQueryEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    queryId: BigNumber;
    version: string;
    owner: string;
    metadata: string;
  }
>;

// export class QueryRegistry extends BaseContract {
//   connect(signerOrProvider: Signer | Provider | string): this;
//   attach(addressOrName: string): this;
//   deployed(): Promise<this>;

//   listeners<EventArgsArray extends Array<any>, EventArgsObject>(
//     eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
//   ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
//   off<EventArgsArray extends Array<any>, EventArgsObject>(
//     eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
//     listener: TypedListener<EventArgsArray, EventArgsObject>
//   ): this;
//   on<EventArgsArray extends Array<any>, EventArgsObject>(
//     eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
//     listener: TypedListener<EventArgsArray, EventArgsObject>
//   ): this;
//   once<EventArgsArray extends Array<any>, EventArgsObject>(
//     eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
//     listener: TypedListener<EventArgsArray, EventArgsObject>
//   ): this;
//   removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
//     eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
//     listener: TypedListener<EventArgsArray, EventArgsObject>
//   ): this;
//   removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
//     eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
//   ): this;

//   listeners(eventName?: string): Array<Listener>;
//   off(eventName: string, listener: Listener): this;
//   on(eventName: string, listener: Listener): this;
//   once(eventName: string, listener: Listener): this;
//   removeListener(eventName: string, listener: Listener): this;
//   removeAllListeners(eventName?: string): this;

//   queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
//     event: TypedEventFilter<EventArgsArray, EventArgsObject>,
//     fromBlockOrBlockhash?: string | number | undefined,
//     toBlock?: string | number | undefined
//   ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

//   interface: QueryRegistryInterface;

//   functions: {
//     createQueryProject(
//       metadata: BytesLike,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     deploymentStatusByIndexer(
//       arg0: BytesLike,
//       arg1: string,
//       overrides?: CallOverrides
//     ): Promise<
//       [string, string, BigNumber, BigNumber, string, BigNumber, number] & {
//         indexer: string;
//         deploymentId: string;
//         blockheight: BigNumber;
//         hash: BigNumber;
//         mmrRoot: string;
//         timestamp: BigNumber;
//         status: number;
//       }
//     >;

//     isOffline(
//       deploymentId: BytesLike,
//       indexer: string,
//       overrides?: CallOverrides
//     ): Promise<[boolean]>;

//     nextQueryId(overrides?: CallOverrides): Promise<[BigNumber]>;

//     numberOfIndexingDeployments(
//       arg0: string,
//       overrides?: CallOverrides
//     ): Promise<[BigNumber]>;

//     owner(overrides?: CallOverrides): Promise<[string]>;

//     queryInfoCountByOwner(
//       user: string,
//       overrides?: CallOverrides
//     ): Promise<[BigNumber]>;

//     queryInfoIdsByOwner(
//       arg0: string,
//       arg1: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<[BigNumber]>;

//     queryInfos(
//       arg0: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<
//       [BigNumber, string, string, string, string] & {
//         queryId: BigNumber;
//         owner: string;
//         latestVersion: string;
//         latestDeploymentId: string;
//         metadata: string;
//       }
//     >;

//     renounceOwnership(
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     reportIndexingStatus(
//       deploymentId: BytesLike,
//       _blockheight: BigNumberish,
//       _mmrRoot: BytesLike,
//       _timestamp: BigNumberish,
//       status: BigNumberish,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     setSettings(
//       _settings: string,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     settings(overrides?: CallOverrides): Promise<[string]>;

//     startIndexing(
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     stopIndexing(
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     transferOwnership(
//       newOwner: string,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     unregisterQuery(
//       _queryId: BigNumberish,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;

//     updateQueryProject(
//       queryId: BigNumberish,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       metadata: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<ContractTransaction>;
//   };

//   createQueryProject(
//     metadata: BytesLike,
//     version: BytesLike,
//     deploymentId: BytesLike,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   deploymentStatusByIndexer(
//     arg0: BytesLike,
//     arg1: string,
//     overrides?: CallOverrides
//   ): Promise<
//     [string, string, BigNumber, BigNumber, string, BigNumber, number] & {
//       indexer: string;
//       deploymentId: string;
//       blockheight: BigNumber;
//       hash: BigNumber;
//       mmrRoot: string;
//       timestamp: BigNumber;
//       status: number;
//     }
//   >;

//   isOffline(
//     deploymentId: BytesLike,
//     indexer: string,
//     overrides?: CallOverrides
//   ): Promise<boolean>;

//   nextQueryId(overrides?: CallOverrides): Promise<BigNumber>;

//   numberOfIndexingDeployments(
//     arg0: string,
//     overrides?: CallOverrides
//   ): Promise<BigNumber>;

//   owner(overrides?: CallOverrides): Promise<string>;

//   queryInfoCountByOwner(
//     user: string,
//     overrides?: CallOverrides
//   ): Promise<BigNumber>;

//   queryInfoIdsByOwner(
//     arg0: string,
//     arg1: BigNumberish,
//     overrides?: CallOverrides
//   ): Promise<BigNumber>;

//   queryInfos(
//     arg0: BigNumberish,
//     overrides?: CallOverrides
//   ): Promise<
//     [BigNumber, string, string, string, string] & {
//       queryId: BigNumber;
//       owner: string;
//       latestVersion: string;
//       latestDeploymentId: string;
//       metadata: string;
//     }
//   >;

//   renounceOwnership(
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   reportIndexingStatus(
//     deploymentId: BytesLike,
//     _blockheight: BigNumberish,
//     _mmrRoot: BytesLike,
//     _timestamp: BigNumberish,
//     status: BigNumberish,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   setSettings(
//     _settings: string,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   settings(overrides?: CallOverrides): Promise<string>;

//   startIndexing(
//     deploymentId: BytesLike,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   stopIndexing(
//     deploymentId: BytesLike,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   transferOwnership(
//     newOwner: string,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   unregisterQuery(
//     _queryId: BigNumberish,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   updateQueryProject(
//     queryId: BigNumberish,
//     version: BytesLike,
//     deploymentId: BytesLike,
//     metadata: BytesLike,
//     overrides?: Overrides & { from?: string | Promise<string> }
//   ): Promise<ContractTransaction>;

//   callStatic: {
//     createQueryProject(
//       metadata: BytesLike,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       overrides?: CallOverrides
//     ): Promise<void>;

//     deploymentStatusByIndexer(
//       arg0: BytesLike,
//       arg1: string,
//       overrides?: CallOverrides
//     ): Promise<
//       [string, string, BigNumber, BigNumber, string, BigNumber, number] & {
//         indexer: string;
//         deploymentId: string;
//         blockheight: BigNumber;
//         hash: BigNumber;
//         mmrRoot: string;
//         timestamp: BigNumber;
//         status: number;
//       }
//     >;

//     isOffline(
//       deploymentId: BytesLike,
//       indexer: string,
//       overrides?: CallOverrides
//     ): Promise<boolean>;

//     nextQueryId(overrides?: CallOverrides): Promise<BigNumber>;

//     numberOfIndexingDeployments(
//       arg0: string,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     owner(overrides?: CallOverrides): Promise<string>;

//     queryInfoCountByOwner(
//       user: string,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     queryInfoIdsByOwner(
//       arg0: string,
//       arg1: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     queryInfos(
//       arg0: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<
//       [BigNumber, string, string, string, string] & {
//         queryId: BigNumber;
//         owner: string;
//         latestVersion: string;
//         latestDeploymentId: string;
//         metadata: string;
//       }
//     >;

//     renounceOwnership(overrides?: CallOverrides): Promise<void>;

//     reportIndexingStatus(
//       deploymentId: BytesLike,
//       _blockheight: BigNumberish,
//       _mmrRoot: BytesLike,
//       _timestamp: BigNumberish,
//       status: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<void>;

//     setSettings(_settings: string, overrides?: CallOverrides): Promise<void>;

//     settings(overrides?: CallOverrides): Promise<string>;

//     startIndexing(
//       deploymentId: BytesLike,
//       overrides?: CallOverrides
//     ): Promise<void>;

//     stopIndexing(
//       deploymentId: BytesLike,
//       overrides?: CallOverrides
//     ): Promise<void>;

//     transferOwnership(
//       newOwner: string,
//       overrides?: CallOverrides
//     ): Promise<void>;

//     unregisterQuery(
//       _queryId: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<void>;

//     updateQueryProject(
//       queryId: BigNumberish,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       metadata: BytesLike,
//       overrides?: CallOverrides
//     ): Promise<void>;
//   };

//   filters: {
//     "CreateQuery(uint256,address,bytes32)"(
//       queryId?: null,
//       creator?: null,
//       metadata?: null
//     ): TypedEventFilter<
//       [BigNumber, string, string],
//       { queryId: BigNumber; creator: string; metadata: string }
//     >;

//     CreateQuery(
//       queryId?: null,
//       creator?: null,
//       metadata?: null
//     ): TypedEventFilter<
//       [BigNumber, string, string],
//       { queryId: BigNumber; creator: string; metadata: string }
//     >;

//     "OwnershipTransferred(address,address)"(
//       previousOwner?: string | null,
//       newOwner?: string | null
//     ): TypedEventFilter<
//       [string, string],
//       { previousOwner: string; newOwner: string }
//     >;

//     OwnershipTransferred(
//       previousOwner?: string | null,
//       newOwner?: string | null
//     ): TypedEventFilter<
//       [string, string],
//       { previousOwner: string; newOwner: string }
//     >;

//     "StartIndexing(address,bytes32)"(
//       indexer?: null,
//       deploymentId?: null
//     ): TypedEventFilter<
//       [string, string],
//       { indexer: string; deploymentId: string }
//     >;

//     StartIndexing(
//       indexer?: null,
//       deploymentId?: null
//     ): TypedEventFilter<
//       [string, string],
//       { indexer: string; deploymentId: string }
//     >;

//     "StopIndexing(address,bytes32)"(
//       indexer?: null,
//       deploymentId?: null
//     ): TypedEventFilter<
//       [string, string],
//       { indexer: string; deploymentId: string }
//     >;

//     StopIndexing(
//       indexer?: null,
//       deploymentId?: null
//     ): TypedEventFilter<
//       [string, string],
//       { indexer: string; deploymentId: string }
//     >;

//     "UpdateDeploymentStatus(address,bytes32,uint256,bytes32,uint256,uint8)"(
//       indexer?: null,
//       deploymentId?: null,
//       blockheight?: null,
//       mmrRoot?: null,
//       timestamp?: null,
//       status?: null
//     ): TypedEventFilter<
//       [string, string, BigNumber, string, BigNumber, number],
//       {
//         indexer: string;
//         deploymentId: string;
//         blockheight: BigNumber;
//         mmrRoot: string;
//         timestamp: BigNumber;
//         status: number;
//       }
//     >;

//     UpdateDeploymentStatus(
//       indexer?: null,
//       deploymentId?: null,
//       blockheight?: null,
//       mmrRoot?: null,
//       timestamp?: null,
//       status?: null
//     ): TypedEventFilter<
//       [string, string, BigNumber, string, BigNumber, number],
//       {
//         indexer: string;
//         deploymentId: string;
//         blockheight: BigNumber;
//         mmrRoot: string;
//         timestamp: BigNumber;
//         status: number;
//       }
//     >;

//     "UpdateQuery(uint256,bytes32,address,bytes32)"(
//       queryId?: null,
//       version?: null,
//       owner?: null,
//       metadata?: null
//     ): TypedEventFilter<
//       [BigNumber, string, string, string],
//       { queryId: BigNumber; version: string; owner: string; metadata: string }
//     >;

//     UpdateQuery(
//       queryId?: null,
//       version?: null,
//       owner?: null,
//       metadata?: null
//     ): TypedEventFilter<
//       [BigNumber, string, string, string],
//       { queryId: BigNumber; version: string; owner: string; metadata: string }
//     >;
//   };

//   estimateGas: {
//     createQueryProject(
//       metadata: BytesLike,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     deploymentStatusByIndexer(
//       arg0: BytesLike,
//       arg1: string,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     isOffline(
//       deploymentId: BytesLike,
//       indexer: string,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     nextQueryId(overrides?: CallOverrides): Promise<BigNumber>;

//     numberOfIndexingDeployments(
//       arg0: string,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     owner(overrides?: CallOverrides): Promise<BigNumber>;

//     queryInfoCountByOwner(
//       user: string,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     queryInfoIdsByOwner(
//       arg0: string,
//       arg1: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     queryInfos(
//       arg0: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<BigNumber>;

//     renounceOwnership(
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     reportIndexingStatus(
//       deploymentId: BytesLike,
//       _blockheight: BigNumberish,
//       _mmrRoot: BytesLike,
//       _timestamp: BigNumberish,
//       status: BigNumberish,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     setSettings(
//       _settings: string,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     settings(overrides?: CallOverrides): Promise<BigNumber>;

//     startIndexing(
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     stopIndexing(
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     transferOwnership(
//       newOwner: string,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     unregisterQuery(
//       _queryId: BigNumberish,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;

//     updateQueryProject(
//       queryId: BigNumberish,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       metadata: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<BigNumber>;
//   };

//   populateTransaction: {
//     createQueryProject(
//       metadata: BytesLike,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     deploymentStatusByIndexer(
//       arg0: BytesLike,
//       arg1: string,
//       overrides?: CallOverrides
//     ): Promise<PopulatedTransaction>;

//     isOffline(
//       deploymentId: BytesLike,
//       indexer: string,
//       overrides?: CallOverrides
//     ): Promise<PopulatedTransaction>;

//     nextQueryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

//     numberOfIndexingDeployments(
//       arg0: string,
//       overrides?: CallOverrides
//     ): Promise<PopulatedTransaction>;

//     owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

//     queryInfoCountByOwner(
//       user: string,
//       overrides?: CallOverrides
//     ): Promise<PopulatedTransaction>;

//     queryInfoIdsByOwner(
//       arg0: string,
//       arg1: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<PopulatedTransaction>;

//     queryInfos(
//       arg0: BigNumberish,
//       overrides?: CallOverrides
//     ): Promise<PopulatedTransaction>;

//     renounceOwnership(
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     reportIndexingStatus(
//       deploymentId: BytesLike,
//       _blockheight: BigNumberish,
//       _mmrRoot: BytesLike,
//       _timestamp: BigNumberish,
//       status: BigNumberish,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     setSettings(
//       _settings: string,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

//     startIndexing(
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     stopIndexing(
//       deploymentId: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     transferOwnership(
//       newOwner: string,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     unregisterQuery(
//       _queryId: BigNumberish,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;

//     updateQueryProject(
//       queryId: BigNumberish,
//       version: BytesLike,
//       deploymentId: BytesLike,
//       metadata: BytesLike,
//       overrides?: Overrides & { from?: string | Promise<string> }
//     ): Promise<PopulatedTransaction>;
//   };
// }
